@use '../scroll/' as scroll;

$modeMaps: (
  'onLight': scroll.$theme-light,
  'onDark': scroll.$theme-dark,
);

@function get-scale($prop, $size) {
  @return map-get(scroll.$scale, $prop, $size);
}

@function get-modeColor($prop, $mapName, $schema: 'color-dark') {
  @return map-get(map-get($modeMaps, $mapName), $schema, $prop);
}

@mixin scrollbar($size: 'xs', $modeMapName: 'onLight') {
  &::-webkit-scrollbar {
    width: #{get-scale('track-width', $size)};

    &:horizontal {
      height: #{get-scale('thumb-width', $size)};
    }

    &-thumb {
      background-color: get-modeColor('thumb', $modeMapName);
      width: #{get-scale('thumb-width', $size)};
      border-radius: get-scale('thumb-border-radius', $size);

      &:horizontal {
        height: #{get-scale('thumb-width', $size)};
      }

      &:hover {
        background-color: get-modeColor('thumb-hovered', $modeMapName);
      }
    }

    &-track {
      background-color: get-modeColor('track', $modeMapName);
      border-radius: get-scale('track-border-radius', $size);

      &:hover {
        background-color: get-modeColor('track-hovered', $modeMapName);
      }
    }
  }
}

@mixin scrollbar-disabled {
  &::-webkit-scrollbar {
    &-thumb {
      background-color: map-get(scroll.$theme-light, 'state-disabled', 'thumb');


      &:hover {
        background-color: map-get(scroll.$theme-light, 'state-disabled', 'thumb');
      }
    }

    &-track {
      background-color: map-get(scroll.$theme-light, 'state-disabled', 'track');

      &:hover {
        background-color: map-get(scroll.$theme-light, 'state-disabled', 'track');
      }
    }
  }
}
